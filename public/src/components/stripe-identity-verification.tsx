"use client";

import { useState } from 'react';
import { Button } from './ui/button';
import { Loader2, Fingerprint, ExternalLink, CheckCircle2, AlertCircle, Clock } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Badge } from './ui/badge';

type VerificationStatus = 'uninitialized' | 'pending' | 'processing' | 'verified' | 'failed';

const statusConfig: { [key in VerificationStatus]: { text: string, color: 'default' | 'secondary' | 'destructive', icon: React.ElementType } } = {
    uninitialized: { text: 'Not Started', color: 'secondary', icon: Fingerprint },
    pending: { text: 'Pending User Action', color: 'secondary', icon: Clock },
    processing: { text: 'Processing', color: 'secondary', icon: Loader2 },
    verified: { text: 'Verified', color: 'default', icon: CheckCircle2 },
    failed: { text: 'Failed', color: 'destructive', icon: AlertCircle },
};


export default function StripeIdentityVerification({ caseId, guestName }: { caseId: string, guestName: string }) {
    const [status, setStatus] = useState<VerificationStatus>('uninitialized');
    const [isLoading, setIsLoading] = useState(false);
    const { toast } = useToast();
    
    // In a real app, this would be generated by Stripe and stored
    const verificationUrl = `https://verify.stripe.com/start/ci_1PX0wGDEQaroqDjsHhZoKIPn#/${caseId}`;

    const handleInitiate = () => {
        setIsLoading(true);
        toast({
            title: 'Initiating Stripe Identity Check...',
            description: `A secure verification link will be generated for ${guestName}.`,
        });

        // Simulate API call to your backend, which then calls Stripe
        setTimeout(() => {
            setStatus('pending');
            setIsLoading(false);
            toast({
                title: 'Verification Link Ready',
                description: `The user has been notified. You can also share the link manually.`,
            });
            // Simulate user completing the flow after some time
            setTimeout(() => setStatus('processing'), 15000);
             // Simulate Stripe processing the data
            setTimeout(() => setStatus('verified'), 25000);
        }, 2000);
    }
    
    const StatusIcon = statusConfig[status].icon;
    const isProcessing = status === 'processing';

    return (
        <div className="space-y-4">
            <h4 className="font-semibold flex items-center gap-2">
                <Fingerprint className="text-primary" /> Stripe Identity Verification
            </h4>
            <div className="p-4 bg-muted/50 rounded-lg space-y-4">
                <div className="flex flex-wrap items-center justify-between gap-2">
                    <div className="flex items-center gap-2">
                        <span className="text-sm font-medium">Status:</span>
                        <Badge variant={statusConfig[status].color}>
                            <StatusIcon className={`mr-1 h-3 w-3 ${isProcessing ? 'animate-spin' : ''}`} />
                            {statusConfig[status].text}
                        </Badge>
                    </div>
                     {status === 'uninitialized' && (
                        <Button onClick={handleInitiate} disabled={isLoading}>
                            {isLoading && <Loader2 className="animate-spin" />}
                            Initiate Stripe Identity Check
                        </Button>
                    )}
                </div>

                {status === 'pending' && (
                     <div className="flex flex-col sm:flex-row gap-2 items-center">
                        <p className="text-sm text-muted-foreground flex-1">Awaiting user to complete verification process.</p>
                        <Button asChild variant="outline">
                            <a href={verificationUrl} target="_blank" rel="noopener noreferrer">
                                <ExternalLink /> View Verification Link
                            </a>
                        </Button>
                    </div>
                )}

                {status === 'verified' && (
                     <div className="space-y-2 text-sm p-2 border-l-4 border-chart-2 bg-green-500/10 rounded-r-md">
                        <h5 className="font-semibold text-chart-2">Verification Successful</h5>
                        <ul className="list-disc list-inside text-muted-foreground">
                            <li><strong>Name:</strong> John Doe (Matches)</li>
                            <li><strong>Date of Birth:</strong> 1990-05-15 (Matches)</li>
                            <li><strong>Document Type:</strong> UK Driving Licence</li>
                            <li><strong>Address:</strong> Verified via document</li>
                        </ul>
                    </div>
                )}
                 {status === 'failed' && (
                     <div className="space-y-2 text-sm p-2 border-l-4 border-destructive bg-red-500/10 rounded-r-md">
                        <h5 className="font-semibold text-destructive">Verification Failed</h5>
                        <p className="text-muted-foreground">Reason: Selfie image did not match the document photo. User may retry.</p>
                    </div>
                )}
            </div>
        </div>
    );
}
